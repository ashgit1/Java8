Streams:
=======

Stream represents a sequence of objects from a source, which supports aggregate operations.

Following are the characteristics of a Stream:
==============================================

Sequence of elements:
---------------------
 A stream provides a set of elements of specific type in a sequential manner. 
 A stream gets/computes elements on demand. It never stores the elements.

Source:
-------
Stream takes Collections, Arrays, or I/O resources as input source.

Aggregate operations:
---------------------
Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.

Pipelining:
-----------
Most of the stream operations return stream itself so that their result can be pipelined. 
These operations are called intermediate operations and their function is to take input, process them, 
and return output to the target. 
collect() method is a terminal operation which is normally present at the end of the pipelining operation to mark the end of the stream.

Automatic iterations:
---------------------
Stream operations do the iterations internally over the source elements provided, in contrast to Collections 
where explicit iteration is required.

Generating Streams:
===================
With Java 8, Collection interface has two methods to generate a Stream:

stream():
---------
Returns a sequential stream considering collection as its source.

parallelStream():
-----------------
Returns a parallel Stream considering collection as its source

Useful Methods:
---------------
forEach():
Stream has provided a new method ‘forEach’ to iterate each element of the stream

map():
The ‘map’ method is used to map each element to its corresponding result.

filter():
The ‘filter’ method is used to eliminate elements based on a criteria. 

limit():
The ‘limit’ method is used to reduce the size of the stream.

sorted():
The ‘sorted’ method is used to sort the stream.

parallelStream():
parallelStream is the alternative of stream for parallel processing. 
It is very easy to switch between sequential and parallel streams.

Collectors():
Collectors are used to combine the result of processing on the elements of a stream. 
Collectors can be used to return a list or a string

stats():
With Java 8, statistics collectors are introduced to calculate all statistics 
when stream processing is being done.

ex : StreamTester1.java and StreamTester2.java



